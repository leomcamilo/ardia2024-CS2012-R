Company = names(company_data_clean),
Mean_Volume = company_volumes
)
# Definir os percentis de 30% e 70%
volume_30 <- quantile(company_volumes$Mean_Volume, 0.3, na.rm = TRUE)
volume_70 <- quantile(company_volumes$Mean_Volume, 0.7, na.rm = TRUE)
# Atribuir cada empresa a um grupo com base na média de volume
company_volumes <- company_volumes %>%
mutate(
Group = case_when(
Mean_Volume <= volume_30 ~ "Low Volume (Bottom 30%)",
Mean_Volume > volume_70 ~ "High Volume (Top 30%)",
TRUE ~ "Middle Volume (40%)"
)
)
# Empresas de baixo volume (Bottom 30%)
low_volume <- company_volumes %>%
filter(Group == "Low Volume (Bottom 30%)") %>%
pull(Company)
# Empresas de alto volume (Top 30%)
high_volume <- company_volumes %>%
filter(Group == "High Volume (Top 30%)") %>%
pull(Company)
# Criando um company_data_clean_high_volume e company_data_clean_low_volume
company_data_clean_high_volume <- company_data_clean[high_volume]
company_data_clean_low_volume <- company_data_clean[low_volume]
# Função para converter dataframe em xts
convert_to_xts <- function(df) {
xts(df[, -1], order.by = as.Date(df$Date))
}
# Converter os dataframes em company_data_clean para xts
company_data_clean_xts <- company_data_clean %>%
map(~ convert_to_xts(.x))
# Calcular os spreads para cada empresa
company_spreads_EDGE <- company_data_clean_xts %>%
map(~ bidask::spread(.x[, 1:4], method = "EDGE", width = 21, na.rm = TRUE))
# Calcular o spread com method "CS" para cada empresa em company_spreads
company_spreads_CS <- company_data_clean_xts %>%
map(~ bidask::spread(.x[, 1:4], method = "CS", width = 21, na.rm = TRUE))
# Calcular o spread com method "AR" para cada empresa em company_spreads
company_spreads_AR <- company_data_clean_xts %>%
map(~ bidask::spread(.x[, 1:4], method = "AR", width = 21, na.rm = TRUE))
# Combine os spreads em uma lista de listas
company_spreads_list <- list(
EDGE = company_spreads_EDGE,
CS = company_spreads_CS,
AR = company_spreads_AR
)
# Obtenha os códigos das empresas
company_codes <- names(company_spreads_EDGE)
# Use pmap_dfr para combinar os spreads em um único dataframe
company_spreads_df <- pmap_dfr(
.l = list(
company_code = company_codes,
edge = company_spreads_EDGE,
cs = company_spreads_CS,
ar = company_spreads_AR
),
.f = function(company_code, edge, cs, ar) {
data.frame(
Company_Code = company_code,
Date = index(edge),
Spread_EDGE = as.numeric(edge),
Spread_CS = as.numeric(cs),
Spread_AR = as.numeric(ar)
)
}
)
# Calcular os spreads médios para cada ano em cada método e aplicar na variável company_spreads_year
company_spreads_year <- company_spreads_df %>%
mutate(Year = year(Date)) %>%
group_by(Company_Code, Year) %>%
summarise(
Spread_EDGE = mean(Spread_EDGE, na.rm = TRUE),
Spread_CS = mean(Spread_CS, na.rm = TRUE),
Spread_AR = mean(Spread_AR, na.rm = TRUE),
)
# Filtrar o company_spread_df para high_volume e low_volume
company_spreads_high_volume <- company_spreads_year %>%
filter(Company_Code %in% high_volume)
company_spreads_low_volume <- company_spreads_year %>%
filter(Company_Code %in% low_volume)
# Filtrar o company_spread_year para os anos de 2017 a 2019 (antes da pandemia), para 2020 e 2021 (durante a pandemia) e para 2022 a 2024 (após a pandemia)
company_spreads_pre <- company_spreads_year %>%
filter(Year %in% 2017:2019)
company_spreads_dur <- company_spreads_year %>%
filter(Year %in% 2020:2021)
company_spreads_pos <- company_spreads_year %>%
filter(Year %in% 2022:2024)
# Função para converter dataframe em xts
convert_to_xts <- function(df) {
xts(df[, -1], order.by = as.Date(df$Date))
}
# Converter os dataframes em company_data_clean para xts
company_data_clean_xts <- company_data_clean %>%
map(~ convert_to_xts(.x))
# Calcular os spreads para cada empresa
company_spreads_EDGE <- company_data_clean_xts %>%
map(~ bidask::spread(.x[, 1:4], method = "EDGE", width = 21, na.rm = TRUE))
# Calcular o spread com method "CS" para cada empresa em company_spreads
company_spreads_CS <- company_data_clean_xts %>%
map(~ bidask::spread(.x[, 1:4], method = "CS", width = 21, na.rm = TRUE))
# Calcular o spread com method "AR" para cada empresa em company_spreads
company_spreads_AR <- company_data_clean_xts %>%
map(~ bidask::spread(.x[, 1:4], method = "AR", width = 21, na.rm = TRUE))
# Combine os spreads em uma lista de listas
company_spreads_list <- list(
EDGE = company_spreads_EDGE,
CS = company_spreads_CS,
AR = company_spreads_AR
)
# Obtenha os códigos das empresas
company_codes <- names(company_spreads_EDGE)
# Use pmap_dfr para combinar os spreads em um único dataframe
company_spreads_df <- pmap_dfr(
.l = list(
company_code = company_codes,
edge = company_spreads_EDGE,
cs = company_spreads_CS,
ar = company_spreads_AR
),
.f = function(company_code, edge, cs, ar) {
data.frame(
Company_Code = company_code,
Date = index(edge),
Spread_EDGE = as.numeric(edge),
Spread_CS = as.numeric(cs),
Spread_AR = as.numeric(ar)
)
}
)
# Primeiro, remove o sufixo ".SA" dos códigos das empresas em company_spreads_df
company_spreads_df <- company_spreads_df %>%
mutate(Company_Code = str_replace(Company_Code, "\\.SA$", ""))
# Renomeie a coluna Bid_Ask_Spread_Pct para Spread_Bloomberg
spreads_bloomberg <- spreads_company %>%
rename(Spread_Bloomberg = Bid_Ask_Spread_Pct)
# Verifique se as datas estão no mesmo formato em ambos os dataframes
# Se necessário, converta para o mesmo formato
if (!inherits(company_spreads_df$Date, "Date")) {
company_spreads_df <- company_spreads_df %>%
mutate(Date = as.Date(Date))
}
if (!inherits(spreads_bloomberg$Date, "Date")) {
spreads_bloomberg <- spreads_bloomberg %>%
mutate(Date = as.Date(Date))
}
# Junte os dataframes baseado em Company_Code e Date
company_spreads_df_with_bloomberg <- left_join(
company_spreads_df,
spreads_bloomberg %>% select(Company_Code, Date, Spread_Bloomberg),
by = c("Company_Code", "Date")
)
# Verifique os resultados
cat("Número de linhas no dataframe original:", nrow(company_spreads_df), "\n")
cat("Número de linhas após junção com dados Bloomberg:", nrow(company_spreads_df_with_bloomberg), "\n")
cat("Número de correspondências encontradas (não-NA):", sum(!is.na(company_spreads_df_with_bloomberg$Spread_Bloomberg)), "\n")
# Calcular os spreads médios para cada ano em cada método e aplicar na variável company_spreads_year
company_spreads_year <- company_spreads_df %>%
mutate(Year = year(Date)) %>%
group_by(Company_Code, Year) %>%
summarise(
Spread_EDGE = mean(Spread_EDGE, na.rm = TRUE),
Spread_CS = mean(Spread_CS, na.rm = TRUE),
Spread_AR = mean(Spread_AR, na.rm = TRUE),
)
# Filtrar o company_spread_df para high_volume e low_volume
company_spreads_high_volume <- company_spreads_year %>%
filter(Company_Code %in% high_volume)
company_spreads_low_volume <- company_spreads_year %>%
filter(Company_Code %in% low_volume)
# Filtrar o company_spread_year para os anos de 2017 a 2019 (antes da pandemia), para 2020 e 2021 (durante a pandemia) e para 2022 a 2024 (após a pandemia)
company_spreads_pre <- company_spreads_year %>%
filter(Year %in% 2017:2019)
company_spreads_dur <- company_spreads_year %>%
filter(Year %in% 2020:2021)
company_spreads_pos <- company_spreads_year %>%
filter(Year %in% 2022:2024)
View(company_spreads_df_with_bloomberg)
# Função para converter dataframe em xts
convert_to_xts <- function(df) {
xts(df[, -1], order.by = as.Date(df$Date))
}
# Converter os dataframes em company_data_clean para xts
company_data_clean_xts <- company_data_clean %>%
map(~ convert_to_xts(.x))
# Calcular os spreads para cada empresa
company_spreads_EDGE <- company_data_clean_xts %>%
map(~ bidask::spread(.x[, 1:4], method = "EDGE", width = 21, na.rm = TRUE))
# Calcular o spread com method "CS" para cada empresa em company_spreads
company_spreads_CS <- company_data_clean_xts %>%
map(~ bidask::spread(.x[, 1:4], method = "CS", width = 21, na.rm = TRUE))
# Calcular o spread com method "AR" para cada empresa em company_spreads
company_spreads_AR <- company_data_clean_xts %>%
map(~ bidask::spread(.x[, 1:4], method = "AR", width = 21, na.rm = TRUE))
# Combine os spreads em uma lista de listas
company_spreads_list <- list(
EDGE = company_spreads_EDGE,
CS = company_spreads_CS,
AR = company_spreads_AR
)
# Obtenha os códigos das empresas
company_codes <- names(company_spreads_EDGE)
# Use pmap_dfr para combinar os spreads em um único dataframe
company_spreads_df <- pmap_dfr(
.l = list(
company_code = company_codes,
edge = company_spreads_EDGE,
cs = company_spreads_CS,
ar = company_spreads_AR
),
.f = function(company_code, edge, cs, ar) {
data.frame(
Company_Code = company_code,
Date = index(edge),
Spread_EDGE = as.numeric(edge),
Spread_CS = as.numeric(cs),
Spread_AR = as.numeric(ar)
)
}
)
# Primeiro, remove o sufixo ".SA" dos códigos das empresas em company_spreads_df
company_spreads_df <- company_spreads_df %>%
mutate(Company_Code = str_replace(Company_Code, "\\.SA$", ""))
# Renomeie a coluna Bid_Ask_Spread_Pct para Spread_Bloomberg
spreads_bloomberg <- spreads_company %>%
rename(Spread_Bloomberg = Bid_Ask_Spread_Pct)
# Junte os dataframes baseado em Company_Code e Date
company_spreads_df_with_bloomberg <- left_join(
company_spreads_df,
spreads_bloomberg %>% select(Company_Code, Date, Spread_Bloomberg),
by = c("Company_Code", "Date")
)
# Verifique os resultados
cat("Número de linhas no dataframe original:", nrow(company_spreads_df), "\n")
cat("Número de linhas após junção com dados Bloomberg:", nrow(company_spreads_df_with_bloomberg), "\n")
cat("Número de correspondências encontradas (não-NA):", sum(!is.na(company_spreads_df_with_bloomberg$Spread_Bloomberg)), "\n")
# Calcular os spreads médios para cada ano em cada método e aplicar na variável company_spreads_year
company_spreads_year <- company_spreads_df %>%
mutate(Year = year(Date)) %>%
group_by(Company_Code, Year) %>%
summarise(
Spread_EDGE = mean(Spread_EDGE, na.rm = TRUE),
Spread_CS = mean(Spread_CS, na.rm = TRUE),
Spread_AR = mean(Spread_AR, na.rm = TRUE),
)
# Filtrar o company_spread_df para high_volume e low_volume
company_spreads_high_volume <- company_spreads_year %>%
filter(Company_Code %in% high_volume)
company_spreads_low_volume <- company_spreads_year %>%
filter(Company_Code %in% low_volume)
# Filtrar o company_spread_year para os anos de 2017 a 2019 (antes da pandemia), para 2020 e 2021 (durante a pandemia) e para 2022 a 2024 (após a pandemia)
company_spreads_pre <- company_spreads_year %>%
filter(Year %in% 2017:2019)
company_spreads_dur <- company_spreads_year %>%
filter(Year %in% 2020:2021)
company_spreads_pos <- company_spreads_year %>%
filter(Year %in% 2022:2024)
View(company_spreads_df_with_bloomberg)
# List all CSV files in the directory that end with "-"
csv_files <- list.files(path = directory, pattern = ".*-\\.csv$", full.names = TRUE)
# Function to read a CSV file and extract company code
read_company_csv <- function(file_path) {
# Extract the filename without extension
filename <- tools::file_path_sans_ext(basename(file_path))
# Read the CSV
data <- read_csv(file_path)
# First, check what the actual column names are
date_column <- names(data)[grep("Date", names(data), ignore.case = TRUE)]
if (length(date_column) == 0) {
warning("No date column found in file: ", file_path)
return(NULL)
}
# Add company code column and select only needed columns
data %>%
mutate(Company_Code = filename) %>%
select(Company_Code, !!date_column, Bid_Ask_Spread_Pct) %>%
rename(Date = !!date_column)  # Standardize to "Date"
}
# Read all CSVs and combine them
if (length(csv_files) > 0) {
# Use safely to handle potential errors
safe_read <- safely(read_company_csv)
results <- map(csv_files, safe_read)
# Extract successful results
valid_data <- map(results, "result") %>%
compact()
if (length(valid_data) > 0) {
spreads_company <- bind_rows(valid_data)
# Clean up company codes by removing hyphens at the end
spreads_company <- spreads_company %>%
mutate(Company_Code = str_replace(Company_Code, " -$", ""))
# Save to global environment
assign("spreads_company", spreads_company, envir = .GlobalEnv)
# Optionally save to CSV
write_csv(spreads_company, file.path(directory, "spreads_company.csv"))
cat("Created 'spreads_company' with", nrow(spreads_company), "rows and",
length(unique(spreads_company$Company_Code)), "unique companies.\n")
} else {
cat("No valid data found in any of the CSV files.\n")
}
} else {
cat("No CSV files found that end with '-'.\n")
}
# Agrupar as empresas com maiores médias de volume diários e selecionar os 30% maiores e 30% menores
# Calcular a média de volume para cada empresa
company_volumes <- company_data_clean %>%
# Extrair a coluna de Volume (coluna 5) de cada dataframe
map_dbl(~ mean(.x[[5]], na.rm = TRUE))
# Converter os resultados para um dataframe para melhor manipulação
company_volumes <- tibble(
Company = names(company_data_clean),
Mean_Volume = company_volumes
)
# Definir os percentis de 30% e 70%
volume_30 <- quantile(company_volumes$Mean_Volume, 0.3, na.rm = TRUE)
volume_70 <- quantile(company_volumes$Mean_Volume, 0.7, na.rm = TRUE)
# Atribuir cada empresa a um grupo com base na média de volume
company_volumes <- company_volumes %>%
mutate(
Group = case_when(
Mean_Volume <= volume_30 ~ "Low Volume (Bottom 30%)",
Mean_Volume > volume_70 ~ "High Volume (Top 30%)",
TRUE ~ "Middle Volume (40%)"
)
)
# Empresas de baixo volume (Bottom 30%)
low_volume <- company_volumes %>%
filter(Group == "Low Volume (Bottom 30%)") %>%
pull(Company)
# Empresas de alto volume (Top 30%)
high_volume <- company_volumes %>%
filter(Group == "High Volume (Top 30%)") %>%
pull(Company)
# Criando um company_data_clean_high_volume e company_data_clean_low_volume
company_data_clean_high_volume <- company_data_clean[high_volume]
company_data_clean_low_volume <- company_data_clean[low_volume]
# Função para converter dataframe em xts
convert_to_xts <- function(df) {
xts(df[, -1], order.by = as.Date(df$Date))
}
# Converter os dataframes em company_data_clean para xts
company_data_clean_xts <- company_data_clean %>%
map(~ convert_to_xts(.x))
# Calcular os spreads para cada empresa
company_spreads_EDGE <- company_data_clean_xts %>%
map(~ bidask::spread(.x[, 1:4], method = "EDGE", width = 21, na.rm = TRUE))
# Calcular o spread com method "CS" para cada empresa em company_spreads
company_spreads_CS <- company_data_clean_xts %>%
map(~ bidask::spread(.x[, 1:4], method = "CS", width = 21, na.rm = TRUE))
# Calcular o spread com method "AR" para cada empresa em company_spreads
company_spreads_AR <- company_data_clean_xts %>%
map(~ bidask::spread(.x[, 1:4], method = "AR", width = 21, na.rm = TRUE))
# Combine os spreads em uma lista de listas
company_spreads_list <- list(
EDGE = company_spreads_EDGE,
CS = company_spreads_CS,
AR = company_spreads_AR
)
# Obtenha os códigos das empresas
company_codes <- names(company_spreads_EDGE)
# Use pmap_dfr para combinar os spreads em um único dataframe
company_spreads_df <- pmap_dfr(
.l = list(
company_code = company_codes,
edge = company_spreads_EDGE,
cs = company_spreads_CS,
ar = company_spreads_AR
),
.f = function(company_code, edge, cs, ar) {
data.frame(
Company_Code = company_code,
Date = index(edge),
Spread_EDGE = as.numeric(edge),
Spread_CS = as.numeric(cs),
Spread_AR = as.numeric(ar)
)
}
)
# Primeiro, remove o sufixo ".SA" dos códigos das empresas em company_spreads_df
company_spreads_df <- company_spreads_df %>%
mutate(Company_Code = str_replace(Company_Code, "\\.SA$", ""))
# Renomeie a coluna Bid_Ask_Spread_Pct para Spread_Bloomberg
spreads_bloomberg <- spreads_company %>%
rename(Spread_Bloomberg = Bid_Ask_Spread_Pct)
# Junte os dataframes baseado em Company_Code e Date
company_spreads_df_with_bloomberg <- left_join(
company_spreads_df,
spreads_bloomberg %>% select(Company_Code, Date, Spread_Bloomberg),
by = c("Company_Code", "Date")
)
# Verifique os resultados
cat("Número de linhas no dataframe original:", nrow(company_spreads_df), "\n")
cat("Número de linhas após junção com dados Bloomberg:", nrow(company_spreads_df_with_bloomberg), "\n")
cat("Número de correspondências encontradas (não-NA):", sum(!is.na(company_spreads_df_with_bloomberg$Spread_Bloomberg)), "\n")
# Calcular os spreads médios para cada ano em cada método e aplicar na variável company_spreads_year
company_spreads_year <- company_spreads_df %>%
mutate(Year = year(Date)) %>%
group_by(Company_Code, Year) %>%
summarise(
Spread_EDGE = mean(Spread_EDGE, na.rm = TRUE),
Spread_CS = mean(Spread_CS, na.rm = TRUE),
Spread_AR = mean(Spread_AR, na.rm = TRUE),
)
# Filtrar o company_spread_df para high_volume e low_volume
company_spreads_high_volume <- company_spreads_year %>%
filter(Company_Code %in% high_volume)
company_spreads_low_volume <- company_spreads_year %>%
filter(Company_Code %in% low_volume)
# Filtrar o company_spread_year para os anos de 2017 a 2019 (antes da pandemia), para 2020 e 2021 (durante a pandemia) e para 2022 a 2024 (após a pandemia)
company_spreads_pre <- company_spreads_year %>%
filter(Year %in% 2017:2019)
company_spreads_dur <- company_spreads_year %>%
filter(Year %in% 2020:2021)
company_spreads_pos <- company_spreads_year %>%
filter(Year %in% 2022:2024)
View(company_spreads_df_with_bloomberg)
# Substituir o dataframe original
company_spreads_df <- company_spreads_df_with_bloomberg
# Calcular os spreads médios para cada ano em cada método e aplicar na variável company_spreads_year
company_spreads_year <- company_spreads_df %>%
mutate(Year = year(Date)) %>%
group_by(Company_Code, Year) %>%
summarise(
Spread_EDGE = mean(Spread_EDGE, na.rm = TRUE),
Spread_CS = mean(Spread_CS, na.rm = TRUE),
Spread_AR = mean(Spread_AR, na.rm = TRUE),
)
# Função para calcular o RMSE
calcular_rmse <- function(estimativas, referencia) {
sqrt(mean((estimativas - referencia)^2, na.rm = TRUE))
}
# Função para calcular o MAE
calcular_mae <- function(estimativas, referencia) {
mean(abs(estimativas - referencia), na.rm = TRUE)
}
# Função para realizar o teste KS e retornar resultados formatados
realizar_ks_teste <- function(estimativas, referencia) {
teste <- ks.test(estimativas, referencia)
return(data.frame(
D_estatistica = teste$statistic,
p_valor = teste$p.value,
resultado = ifelse(teste$p.value < 0.05, "Distribuições diferentes", "Distribuições similares")
))
}
# Aplicação das métricas para cada metodologia
resultados_erro <- data.frame(
Metodologia = c("Metodologia 1", "Metodologia 2", "Metodologia 3"),
RMSE = c(
calcular_rmse(company_spreads_df$Spread_CS, company_spreads_df$Spread_Bloomberg),
calcular_rmse(company_spreads_df$Spread_AR, company_spreads_df$Spread_Bloomberg),
calcular_rmse(company_spreads_df$Spread_EDGE, company_spreads_df$Spread_Bloomberg)
),
MAE = c(
calcular_mae(company_spreads_df$Spread_CS, company_spreads_df$Spread_Bloomberg),
calcular_mae(company_spreads_df$Spread_AR, company_spreads_df$Spread_Bloomberg),
calcular_mae(company_spreads_df$Spread_EDGE, company_spreads_df$Spread_Bloomberg)
)
)
# Aplicação do teste KS para cada metodologia
ks_metodo1 <- realizar_ks_teste(company_spreads_df$Spread_CS, company_spreads_df$Spread_Bloomberg)
ks_metodo2 <- realizar_ks_teste(company_spreads_df$Spread_AR, company_spreads_df$Spread_Bloomberg)
ks_metodo3 <- realizar_ks_teste(company_spreads_df$Spread_EDGE, company_spreads_df$Spread_Bloomberg)
resultados_ks <- bind_rows(
mutate(ks_metodo1, Metodologia = "Metodologia 1"),
mutate(ks_metodo2, Metodologia = "Metodologia 2"),
mutate(ks_metodo3, Metodologia = "Metodologia 3")
)
View(resultados_erro)
# Função para calcular o RMSE
calcular_rmse <- function(estimativas, referencia) {
sqrt(mean((estimativas - referencia)^2, na.rm = TRUE))
}
# Função para calcular o MAE
calcular_mae <- function(estimativas, referencia) {
mean(abs(estimativas - referencia), na.rm = TRUE)
}
# Função para realizar o teste KS e retornar resultados formatados
realizar_ks_teste <- function(estimativas, referencia) {
teste <- ks.test(estimativas, referencia)
return(data.frame(
D_estatistica = teste$statistic,
p_valor = teste$p.value,
resultado = ifelse(teste$p.value < 0.05, "Distribuições diferentes", "Distribuições similares")
))
}
# Aplicação das métricas para cada metodologia
resultados_erro <- data.frame(
Metodologia = c("Metodologia 1", "Metodologia 2", "Metodologia 3"),
RMSE = c(
calcular_rmse(company_spreads_df$Spread_CS, company_spreads_df$Spread_Bloomberg),
calcular_rmse(company_spreads_df$Spread_AR, company_spreads_df$Spread_Bloomberg),
calcular_rmse(company_spreads_df$Spread_EDGE, company_spreads_df$Spread_Bloomberg)
),
MAE = c(
calcular_mae(company_spreads_df$Spread_CS, company_spreads_df$Spread_Bloomberg),
calcular_mae(company_spreads_df$Spread_AR, company_spreads_df$Spread_Bloomberg),
calcular_mae(company_spreads_df$Spread_EDGE, company_spreads_df$Spread_Bloomberg)
)
)
# Aplicação do teste KS para cada metodologia
ks_metodo1 <- realizar_ks_teste(company_spreads_df$Spread_CS, company_spreads_df$Spread_Bloomberg)
ks_metodo2 <- realizar_ks_teste(company_spreads_df$Spread_AR, company_spreads_df$Spread_Bloomberg)
ks_metodo3 <- realizar_ks_teste(company_spreads_df$Spread_EDGE, company_spreads_df$Spread_Bloomberg)
resultados_ks <- bind_rows(
mutate(ks_metodo1, Metodologia = "Corwin-Schultz"),
mutate(ks_metodo2, Metodologia = "Abdi e Ranaldo"),
mutate(ks_metodo3, Metodologia = "EDGE")
)
View(resultados_ks)
View(resultados_erro)
View(resultados_erro)
