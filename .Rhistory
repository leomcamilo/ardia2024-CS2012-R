who1 <- separate(who, col = "Grupos", sep = "_", into = c("New","sp","resto"))
View(who1)
?stringr
View(who)
who <- pivot_longer(who, new_sp_m014:newrel_f65, names_to = "groups", values_to = "casos")
who0groups <- str_replace_all(who$Grupos,"rel","_rel")
head(who0groups)
rm(who0groups)
who$Grupos <- str_replace_all(who$Grupos,"rel","_rel")
View(who)
who1 <- separate(who, col = "Grupos", sep = "_", into = c("New","sp","resto"))
View(who1)
who1 <- separate(who, col = "Grupos", sep = "_", into = c("New","sp","sex and age"))
who1 <- separate(who, col = "Grupos", sep = "_", into = c("New","sp|sn|rel","sex and age"))
who1 <- separate(who, col = "sex and age", sep = "(m|f)([0-9]{2,4})", into = c("Sexo","Faixa Etária"))
?separate
who1 <- separate(who, col = "sex and age", sep = 1, into = c("Sexo","Faixa Etária"))
View(who1)
who1 <- separate(who, col = 7, sep = 1, into = c("Sexo","Faixa Etária"))
who1 <- separate(who1, col = "sex and age", sep = 1, into = c("Sexo","Faixa Etária"))
View(who1)
rm(who1)
who <- separate(who, col = "Grupos", sep = "_", into = c("New","sp|sn|rel","sex and age"))
who <- separate(who, col = "sex and age", sep = 1, into = c("Sexo","Faixa Etária"))
?select
View(who)
who <- select(who, -"iso2", -"iso3", -"new")
who <- select(who, -iso2, -iso3, -new)
who <- select(who, !c("iso2","iso3","new"))
who <- select(who, !c(iso2,iso3,new))
who1 <- select(who, !c(who.iso2,who.iso3,who.new))
?as.tibble()
who1 <- select(as_tibble(who), !c(who.iso2,who.iso3,who.new))
who1 <- select(as_tibble(who), !c(iso2,iso3,new))
df <- fread("
Ano	Mundo	África	Ásia	Europa	América Latina	América do Norte	Oceania
1750	791 000	106 000	502 000	163 000	16 000	2 000	2 000
1800	978 000	107 000	635 000	203 000	24 000	7 000	2 000
1850	1 262 000	111 000	809 000	276 000	38 000	26.000	2 000
1900	1 650 000	133 000	947 000	408 000	74 000	82 000	6 000
1950	2 518 629	221 214	1 398 488	547 403	167 097	171 616	12 812
1955	2 755 823	246 746	1 541 947	575 184	190 797	186 884	14 265
1960	3 021 475	277 398	1 701 336	604 401	218 300	204 152	15 888
1965	3 334 874	313 744	1 899 424	634 026	250 452	219 570	17 657
1970	3 692 492	357 283	2 143 118	655 855	284 856	231 937	19 443
1975	4 063 587	413 450	2 387 727	674 143	323 128	244 003	21 136
1980	4 434 682	469 618	2 632 335	692 431	361 401	256 068	22 828
1985	4 830 979	541 814	2 887 552	706 009	401 469	269 456	24 678
1990	5 263 593	622 443	3 167 807	721 582	441 525	283 549	26 687
1995	5 674 380	707 462	3 430 052	727 405	481 099	299 438	28 924
2000	6 070 581	795 671	3 679 737	727 986	520 229	315 915	31 043
2005	6 453 628	887 964	3 917 508	724 722	558 281	332 156	32 998
")
View(df)
View(df)
who1 <- select(as_tibble(who), !c(iso2,iso3,new))
?select
who1 %>% as_tibble %>% select(!c(iso2,iso3,new))
who %>% as_tibble %>% select(!c(iso2,iso3,new))
View(who)
who %>% as_tibble %>% select(-iso2,-iso3,-new)
rlang::last_error()
select(who,-iso2,-iso3,-new)
View(who)
str(who)
select(who,-iso2,-iso3,-New)
who <- select(who,-iso2,-iso3,-New)
library(tidyverse)
ggplot(data = mpg)
rm(df, df_sep)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(readr)){
install.packages("readr")
library(readr)
}
TelecomUsers <- read_delim("telecom_users.csv",
";", escape_double = FALSE, trim_ws = TRUE)
summarise(TelecomUsers)
View(TelecomUsers)
?summarise
TelecomUsers %>%  summarise(mean = mean(disp))
TelecomUsers %>%  summarise(mean
)
TelecomUsers %>% summarise(mean = mean())
TelecomUsers %>% summarise(mean = mean(MonthlyCharges))
mean(TelecomUsers$MonthlyCharges)
TelecomUsers %>% summarise(mean = mean(MonthlyCharges), n = n())
TelecomUsers %>% group_by(PaymentMethod)
TelecomUsers %>% group_by(customerID)
unique(TelecomUsers$customerID)
is.character(unique(TelecomUsers$customerID))
length(unique(TelecomUsers$customerID))
TelecomUsers %>% group_by(Contract)
ByContract <- TelecomUsers %>% group_by(Contract)
View(ByContract)
chicago <- mutate(chicago, year = as.POSIXlt(date)$year + 1900)
TelecomUsers$TotalCharges %>% select(NA)
TelecomUsers$TotalCharges %>% select(is.na())
TelecomUsers$TotalCharges %>% filter(is.na())
TelecomUsers %>% filter(TotalCharges == NA)
filter(TelecomUsers, TotalCharges == NA)
select(TelecomUsers, TotalCharges == NA)
select(TelecomUsers$TotalCharges, NA)
select(TelecomUsers$TotalCharges, "NA")
summary(TelecomUsers$MonthlyCharges)
summary(TelecomUsers$TotalCharges)
length(na.omit(TelecomUsers$TotalCharges))
length(TelecomUsers$TotalCharges)
str(TelecomUsers$tenure)
filter(TelecomUsers, tenure = 0)
filter(TelecomUsers, tenure == 0)
length(filter(TelecomUsers, tenure == 0))
length(filter(TelecomUsers$tenure, tenure == 0))
str(TelecomUsers$tenure)
filter(TelecomUsers, tenure == 0)
sum(is.na(unique(TelecomUsers$MonthlyCharges)))
sum(is.na(unique(TelecomUsers$TotalCharges)))
str(TelecomUsers$tenure)
filter(TelecomUsers, tenure == 0)
filter(TelecomUsers, tenure == 0)
select(filter(TelecomUsers, PaperlessBilling == "No"),PaperlessBilling:PaymentMethod)
unique(select(filter(TelecomUsers, PaperlessBilling == "No"),PaperlessBilling:PaymentMethod))
unique(select(filter(TelecomUsers, PaperlessBilling == "YES"),PaperlessBilling:PaymentMethod))
unique(select(filter(TelecomUsers, PaperlessBilling == "Yes"),PaperlessBilling:PaymentMethod))
ggplot(data = TelecomUsers) +
geom_bar(mapping = aes(PaymentMethod))
ggplot(data = TelecomUsers) +
geom_bar(mapping = aes(PaymentMethod))
ggplot(data = TelecomUsers) +
geom_bar(mapping = aes(MonthlyCharges))
ggplot(data = TelecomUsers) +
geom_boxplot(mapping = aes(MonthlyCharges))
ggplot(data = TelecomUsers) +
geom_boxplot(mapping = aes(y = MonthlyCharges))
ggplot(data = TelecomUsers) +
geom_point(mapping = aes(x = MonthlyCharges))
ggplot(data = TelecomUsers) +
geom_point(mapping = aes(MonthlyCharges))
ggplot(data = TelecomUsers) +
geom_point(mapping = aes(x = MonthlyCharges, y = count(customerID)))
ggplot(data = TelecomUsers) +
geom_point(mapping = aes(x = MonthlyCharges, y = Churn))
ggplot(data = TelecomUsers, mapping = aes(y = MonthlyCharges)) +
geom_boxplot()
ggplot(data = TelecomUsers, mapping = aes(y = TotalCharges)) +
geom_boxplot()
ggplot(data = TelecomUsers, mapping = aes(y = MonthlyCharges)) +
geom_boxplot()
ggplot(data = TelecomUsers, mapping = aes(x = tenure, y = MonthlyCharges)) +
geom_bar()
ggplot(data = TelecomUsers) +
geom_bar(mapping = aes(x = tenure, y = MonthlyCharges))
ggplot(data = TelecomUsers) +
geom_point(mapping = aes(x = tenure, y = MonthlyCharges))
ggplot(data = TelecomUsers) +
geom_point(mapping = aes(x = tenure, y = MonthlyCharges, color = Contract))
ggplot(data = TelecomUsers) +
geom_point(mapping = aes(x = tenure, y = MonthlyCharges, color = Contract)) +
scale_color_manual(values = c("#5548D8","#D84855","#48D855"))
ggplot(data = TelecomUsers) +
geom_point(mapping = aes(x = tenure, y = MonthlyCharges, color = Contract)) +
scale_color_manual(values = c("#D84855","#48D855","#5548D8"))
ggplot(data = TelecomUsers) +
geom_point(mapping = aes(x = tenure, y = MonthlyCharges, color = Contract)) +
scale_color_manual(values = c("#D84855","#38D835","#5548D8"))
ggplot(data = TelecomUsers) +
geom_point(mapping = aes(x = tenure, y = MonthlyCharges, color = Contract)) +
scale_color_manual(values = c("#D84855","#18D815","#5548D8"))
ggplot(data = TelecomUsers) +
geom_point(mapping = aes(x = tenure, y = MonthlyCharges, color = Contract)) +
scale_color_manual(values = c("#D84855","#18E815","#5548D8"))
ggplot(data = TelecomUsers) +
geom_point(mapping = aes(x = tenure, y = MonthlyCharges, color = Contract)) +
scale_color_manual(values = c("#D84855","#38D825","#5548D8"))
str(TelecomUsers$tenure)
filter(TelecomUsers, tenure == 0)
summary(TelecomUsers$MonthlyCharges)
summary(TelecomUsers$TotalCharges)
summary(TelecomUsers$MonthlyCharges)
summary(TelecomUsers$TotalCharges)
ggplot(data = TelecomUsers) +
geom_bar(mapping = aes(x = SeniorCitizen, y = MonthlyCharges, color = Churn))
ggplot(data = TelecomUsers, mapping = aes(x = SeniorCitizen, y = MonthlyCharges, color = Churn)) +
geom_bar()
ggplot(data = TelecomUsers, mapping = aes(x = MonthlyCharges, color = Churn)) +
geom_bar()
ggplot(data = TelecomUsers, mapping = aes(x = MonthlyCharges, color = Partner)) +
geom_bar()
ggplot(data = TelecomUsers, mapping = aes(x = MonthlyCharges, color = Dependents)) +
geom_bar()
ggplot(data = TelecomUsers, mapping = aes(x = MonthlyCharges, color = MultipleLines)) +
geom_bar()
ggplot(data = TelecomUsers, mapping = aes(x = MonthlyCharges, fill = MultipleLines)) +
geom_bar()
ggplot(data = TelecomUsers, mapping = aes(x = MonthlyCharges, color = MultipleLines)) +
geom_bar()
ggplot(data = TelecomUsers, mapping = aes(x = MonthlyCharges, color = InternetService)) +
geom_bar()
ggplot(data = TelecomUsers, mapping = aes(x = MonthlyCharges, color = PhoneService)) +
geom_bar()
ggplot(data = TelecomUsers, mapping = aes(x = MonthlyCharges, color = InternetService)) +
geom_bar()
ggplot(data = TelecomUsers, mapping = aes(x = MonthlyCharges, color = InternetService)) +
geom_bar()
ggplot(data = filter(TelecomUsers, churn == "Yes"), mapping = aes(x = MonthlyCharges, color = InternetService)) +
geom_bar()
ggplot(data = filter(TelecomUsers, Churn == "Yes"), mapping = aes(x = MonthlyCharges, color = InternetService)) +
geom_bar()
ggplot(data = filter(TelecomUsers, Churn == "No"), mapping = aes(x = MonthlyCharges, color = InternetService)) +
geom_bar()
ggplot(data = filter(TelecomUsers, Churn == "Yes"), mapping = aes(x = MonthlyCharges, color = PhoneService)) +
geom_bar()
ggplot(data = filter(TelecomUsers, Churn == "No"), mapping = aes(x = MonthlyCharges, color = PhoneService)) +
geom_bar()
ggplot(data = filter(TelecomUsers, Churn == "Yes"), mapping = aes(x = MonthlyCharges, color = InternetService)) +
geom_bar()
ggplot(data = filter(TelecomUsers, Churn == "No"), mapping = aes(x = MonthlyCharges, color = InternetService)) +
geom_bar()
ggplot(data = TelecomUsers) +
geom_point(mapping = aes(x = tenure, y = MonthlyCharges, color = PaymentMethod))
#scale_color_manual(values = c("#D84855","#38D825","#5548D8"))
View(TelecomUsers)
if(!require(datasets)){
install.packages("datasets")
library(datasets)
}
library(datasets)
telecomdata <- read.table("TelecomUsers.csv", sep = ";", header = TRUE)
write.csv(TelecomUsers, file = "TelecomUsers.csv", sep = ",")
install.packages("caret")
factorial(3)
factorial
install.packages("installr")
install.packages("rtools")
install.packages("installr")
numerico
numerico <- 1
caracter <- "estudantes"
View(who)
View(df_sep)
View(df)
suppressMessages(library(tidyverse))
suppressMessages(library(lubridate))
suppressMessages(library(readxl))
suppressMessages(library(highcharter))
suppressMessages(library(tidyquant))
suppressMessages(library(tibbletime))
suppressMessages(library(quantmod))
suppressMessages(library(PerformanceAnalytics))
suppressMessages(library(scales))
suppressMessages(library(timetk))
symbols <- c("SPY","EFA", "IJS", "EEM","AGG")
prices <-
getSymbols(symbols,
src = 'yahoo',
from = "2012-12-31",
to = "2017-12-31",
auto.assign = TRUE,
warnings = FALSE,) %>%
map(~Ad(get(.))) %>%
reduce(merge) %>%
`colnames<-`(symbols)
#to monthly prices
prices_monthly<-prices %>%
to.monthly(indexAt = "lastof", OHLC = FALSE)
#computing returns
asset_monthly_returns_xts <-
Return.calculate(prices_monthly,
method = "discrete") %>%
na.omit()
head(asset_monthly_returns_xts,3)
install.packages("GetHFData")
install.packages("quantmod")
library(quantmod)
install.packages("tidyverse")
install.packages("tidyquant")
install.packages("dplyr")
install.packages("readxl")
install.packages("lubridate")
install.packages("zoo")
install.packages("zoo")
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
install.packages("rmarkdown")
install.packages("webshot2")
install.packages("here")
install.packages("GetHFData")
library(quantmod)
install.packages("Quandl")
install.packages("flexdashboard")
install.packages("readxl")
install.packages("tidyverse")
library(tidyverse)
library(quantmod)
library(bidask)
library(readr)
library(purrr)
library(gt)
install.packages("gt")
library(tidyverse)
library(quantmod)
library(bidask)
library(readr)
library(purrr)
library(gt)
# Importar códigos de empresas
company_codes <- read_csv("company_codes.csv")
# Função segura para baixar dados
safe_getSymbols <- safely(function(symbol) {
getSymbols(symbol, src = "yahoo", from = "2017-01-01", to = "2024-10-30", auto.assign = FALSE)
})
# Baixar e salvar os preços de cada empresa em um arquivo CSV separado
company_codes$Company_Code %>%
walk(~ {
result <- safe_getSymbols(.x)
if (!is.null(result$result)) {
data <- result$result
write.csv(data, file = paste0("prices-companies/", .x, ".csv"), row.names = FALSE, sep = ";")
} else {
message("Erro ao baixar dados para: ", .x)
}
})
View(company_codes)
View(safe_getSymbols)
# Importar códigos de empresas
company_codes <- read_csv("company_codes.csv")
# Função segura para baixar dados
safe_getSymbols <- safely(function(symbol) {
getSymbols(symbol, src = "yahoo", from = "2018-01-01", to = "2024-10-30", auto.assign = FALSE)
})
# Baixar e salvar os preços de cada empresa em um arquivo CSV separado
company_codes$Company_Code %>%
walk(~ {
result <- safe_getSymbols(.x)
if (!is.null(result$result)) {
data <- result$result
write.csv(data, file = paste0("prices-companies/", .x, ".csv"), row.names = TRUE)
} else {
message("Erro ao baixar dados para: ", .x)
}
})
# Importar códigos de empresas
company_codes <- read_csv("company_codes.csv")
# Função segura para baixar dados
safe_getSymbols <- safely(function(symbol) {
getSymbols(symbol, src = "yahoo", from = "2018-01-01", to = "2024-10-30", auto.assign = FALSE)
})
# Baixar e salvar os preços de cada empresa em um arquivo CSV separado com as datas de 2018 a 2024
result <- safe_getSymbols(.x)
company_codes$Company_Code %>%
walk(~ {
result <- safe_getSymbols(.x)
if (!is.null(result$result)) {
data <- result$result
write.csv(data, file = paste0("prices-companies/", .x, ".csv"), row.names = TRUE)
} else {
message("Erro ao baixar dados para: ", .x)
}
})
View(result)
result%>%View()
result[1]%>%View()
.%>%View()
# Importar códigos de empresas
company_codes <- read_csv("company_codes.csv")
# Função segura para baixar dados
safe_getSymbols <- safely(function(symbol) {
getSymbols(symbol, src = "yahoo", from = "2017-01-01", to = "2024-10-30", auto.assign = FALSE)
})
# Baixar e salvar os preços de cada empresa em um arquivo CSV separado
company_codes$Company_Code %>%
walk(~ {
result <- safe_getSymbols(.x)
if (!is.null(result$result)) {
data <- result$result
data <- data.frame(Date = index(data), coredata(data))  # Adicionar a coluna de data
write.csv(data, file = paste0("prices-companies/", .x, ".csv"), row.names = FALSE, sep = ";")
} else {
message("Erro ao baixar dados para: ", .x)
}
})
library(tidyverse)
library(quantmod)
library(bidask)
library(readr)
library(purrr)
library(gt)
# Importar códigos de empresas
company_codes <- read_csv("company_codes.csv")
# Função segura para baixar dados
safe_getSymbols <- safely(function(symbol) {
getSymbols(symbol, src = "yahoo", from = "2017-01-01", to = "2024-10-30", auto.assign = FALSE)
})
# Baixar e salvar os preços de cada empresa em um arquivo CSV separado
company_codes$Company_Code %>%
walk(~ {
result <- safe_getSymbols(.x)
if (!is.null(result$result)) {
data <- result$result
data <- data.frame(Date = index(data), coredata(data))  # Adicionar a coluna de data
write.csv(data, file = paste0("prices-companies/", .x, ".csv"), row.names = FALSE, sep = ";")
} else {
message("Erro ao baixar dados para: ", .x)
}
})
# Importar códigos de empresas novamente
company_codes <- read_csv("company_codes.csv")
# Função para ler dados de arquivos CSV
read_company_data <- function(symbol) {
file_path <- paste0("prices-companies/", symbol, ".csv")
if (file.exists(file_path)) {
read_csv(file_path)
} else {
message("Arquivo não encontrado para: ", symbol)
NULL
}
}
# Aplicar a função a todos os códigos de empresas usando purrr::map
company_data_list <- company_codes$Company_Code %>%
map(~ read_company_data(.x))
# Extrair os resultados bem-sucedidos e Nomear a lista com os códigos das empresas
company_data_clean <- company_data_list %>%
map("result") %>%
set_names(company_codes$Company_Code)
# Verificar quais downloads falharam
errors <- company_data_list %>%
map("error") %>%
keep(~ !is.null(.x))
if (length(errors) > 0) {
print("Alguns downloads falharam:")
print(errors)
} else {
print("Todos os dados foram baixados com sucesso.")
}
# Agrupar as empresas com maiores médias de volume diários e selecionar os 30% maiores e 30% menores
# Calcular a média de volume para cada empresa
company_volumes <- company_data_clean %>%
# Extrair a coluna de Volume (coluna 5) de cada dataframe
map_dbl(~ mean(.x[[5]], na.rm = TRUE))
# Converter os resultados para um dataframe para melhor manipulação
company_volumes <- tibble(
Company = names(company_data_clean),
Mean_Volume = company_volumes
)
# Definir os percentis de 30% e 70%
volume_30 <- quantile(company_volumes$Mean_Volume, 0.3, na.rm = TRUE)
volume_70 <- quantile(company_volumes$Mean_Volume, 0.7, na.rm = TRUE)
# Atribuir cada empresa a um grupo com base na média de volume
company_volumes <- company_volumes %>%
mutate(
Group = case_when(
Mean_Volume <= volume_30 ~ "Low Volume (Bottom 30%)",
Mean_Volume > volume_70 ~ "High Volume (Top 30%)",
TRUE ~ "Middle Volume (40%)"
)
)
# Empresas de baixo volume (Bottom 30%)
low_volume <- company_volumes %>%
filter(Group == "Low Volume (Bottom 30%)") %>%
pull(Company)
# Empresas de alto volume (Top 30%)
high_volume <- company_volumes %>%
filter(Group == "High Volume (Top 30%)") %>%
pull(Company)
# Criando um company_data_clean_high_volume e company_data_clean_low_volume
company_data_clean_high_volume <- company_data_clean[high_volume]
company_data_clean_low_volume <- company_data_clean[low_volume]
View(company_volumes)
View(company_data_list)
company_data_list[[1]]%>%View()
View(company_data_clean)
company_data_clean[["TTEN3.SA"]]%>%View()
View(company_data_clean)
View(company_codes)
View(company_data_list)
company_data_list[[1]]%>%View()
# Importar códigos de empresas novamente
company_codes <- read_csv("company_codes.csv")
# Função para ler dados de arquivos CSV
read_company_data <- function(symbol) {
file_path <- paste0("prices-companies/", symbol, ".csv")
if (file.exists(file_path)) {
read_csv(file_path)
} else {
message("Arquivo não encontrado para: ", symbol)
NULL
}
}
# Aplicar a função a todos os códigos de empresas usando purrr::map
company_data_list <- company_codes$Company_Code %>%
map(~ read_company_data(.x))
# Função para remover linhas com valores NA de um dataframe
remove_na_rows <- function(df) {
df %>% drop_na()
}
# Extrair os resultados bem-sucedidos, remover linhas com valores NA e nomear a lista com os códigos das empresas
company_data_clean <- company_data_list %>%
map("result") %>%
map(~ remove_na_rows(.x)) %>%
set_names(company_codes$Company_Code)
install.packages("knitr")
install.packages("rmarkdown")
setwd("~/Bid-ask-dissertacao")
